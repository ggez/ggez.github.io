extends: default.liquid
---


<section class="banner">
    <h1>A Rust library to create Good Games Easily</h1>
</section>
    <p class="text">More specifically, ggez is a lightweight game framework for making 2D
games with minimum friction.  It aims to implement an API based on (a
Rustified version of) the <a href="https://love2d.org/">LÃ–VE</a> game framework.  Thus it contains portable 2D drawing, sound, resource loading and
event handling.</p>


<pre>
    <code class="rust">
extern crate ggez;
use ggez::conf;
use ggez::event;
use ggez::{GameResult, Context};
use ggez::graphics;
use ggez::graphics::{Color, DrawMode, Point};
use std::time::Duration;

struct MainState {
    pos_x: f32,
}

impl MainState {
    fn new(ctx: &mut Context) -> GameResult&lt;MainState&gt; {
        let s = MainState { pos_x: 0.0 };
        Ok(s)
    }
}

impl event::EventHandler for MainState {
    fn update(&mut self, _ctx: &mut Context, _dt: Duration) -> GameResult&lt;()&gt; {
        self.pos_x = self.pos_x % 800.0 + 1.0;
        Ok(())
    }

    fn draw(&mut self, ctx: &mut Context) -> GameResult&lt;()&gt; {
        graphics::clear(ctx);
        graphics::circle(ctx, DrawMode::Fill, Point { x: self.pos_x, y: 380.0 }, 100.0, 32)?;
        graphics::present(ctx);
        Ok(())
    }
}

pub fn main() {
    let c = conf::Conf::new();
    let ctx = &mut Context::load_from_conf("super_simple", "ggez", c).unwrap();
    let state = &mut MainState::new(ctx).unwrap();
    event::run(ctx, state).unwrap();
}
    </code>
</pre>


<p class="text">ggez is not meant to be everything to everyone, but rather a good base upon which to build higher-level systems and a useful tool that lets you immediately get started on projects such as game jams.  As such, it provides:</p>


<ul class="text">
<li>Filesystem abstraction that lets you load resources from folders or zip files</li>
<li>Hardware-accelerated rendering engine built on the `gfx-rs` graphics engine</li>
<li>Playing and loading .ogg, .wav and .flac files via the `rodio` crate</li>
<li>TTF font rendering with `rusttype`, as well as bitmap fonts</li>
<li>Interface for handling keyboard and mouse events easily through callbacks</li>
<li>Config file for defining engine and game settings</li>
<li>Easy timing and FPS measurement functions</li>
</ul>
