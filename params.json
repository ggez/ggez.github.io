{
  "name": "ggez",
  "tagline": "make good games easily",
  "body": "# ggez\r\n\r\nA Rust library to create Good Games Easily.\r\n\r\nMore specifically, ggez is a lightweight game framework for making 2D games.  It aims to\r\nimplement an API quite similar to (a Rustified version of) the Love2D game engine.  This means it will contain\r\nportable basic functionality, without including things that force your game to function a particular way.\r\n\r\nIt's not meant to be everything to everyone, but rather a good base upon which to build higher-level systems and a useful tool that lets you immediately get started on projects such as game jams.  As such, it provides:\r\n\r\n* Filesystem abstraction that lets you load resources from folders or zip files\r\n* Hardware-accelerated rendering of images\r\n* Playing and loading sounds\r\n* Text rendering with TTF and bitmap fonts\r\n* Interface for handling keyboard and mouse events easily through callbacks\r\n* Config file for defining engine and game settings\r\n* Easy timing and FPS measurement functions.\r\n\r\n## Getting it\r\n\r\nggez is built on the latest stable Rust compiler and distributed on <crates.io>.  To include it in your project, just\r\nadd the dependency line to your `Cargo.toml` file:\r\n\r\n```\r\nggez = \"0.2.0\"\r\n```\r\n\r\nOr, check out the [github page!](https://github.com/ggez/ggez)\r\n\r\n## Documentation\r\n\r\nSee the auto-generated docs at [docs.rs](https://docs.rs/ggez/)\r\n\r\n## Examples\r\n\r\nThe best place to find example code is in the project `examples` directory.  There is a simple hello-world example, and a more complete asteroids-like game.\r\n\r\nHere's what hello world looks like.  It's a bit verbose, sorry.  :-P\r\n\r\n```.rust\r\nextern crate ggez;\r\nuse std::path;\r\nuse ggez::conf;\r\nuse ggez::game::{Game, GameState};\r\nuse ggez::{GameResult, Context};\r\nuse ggez::graphics;\r\nuse ggez::timer;\r\nuse std::time::Duration;\r\n\r\n// First we make a structure to contain the game's state\r\nstruct MainState {\r\n    text: graphics::Text,\r\n}\r\n\r\n// Then we implement the `ggez::game::GameState` trait on it, which\r\n// requires callbacks for creating the game state, updating it each\r\n// frame, and drawing it.\r\n//\r\n// The `GameState` trait also contains callbacks for event handling\r\n// that you can override if you wish, but the defaults are fine.\r\nimpl GameState for MainState {\r\n    fn load(ctx: &mut Context, _conf: &conf::Conf) -> GameResult<MainState> {\r\n        let fontpath = path::Path::new(\"DejaVuSerif.ttf\");\r\n        let font = graphics::Font::new(ctx, fontpath, 48).unwrap();\r\n        let text = graphics::Text::new(ctx, \"Hello world!\", &font).unwrap();\r\n\r\n        let s = MainState { text: text };\r\n        Ok(s)\r\n    }\r\n\r\n    fn update(&mut self, _ctx: &mut Context, _dt: Duration) -> GameResult<()> {\r\n        Ok(())\r\n    }\r\n\r\n    fn draw(&mut self, ctx: &mut Context) -> GameResult<()> {\r\n        ctx.renderer.clear();\r\n        try!(graphics::draw(ctx, &mut self.text, None, None));\r\n        ctx.renderer.present();\r\n        timer::sleep_until_next_frame(ctx, 60);\r\n        Ok(())\r\n    }\r\n}\r\n\r\n// Now our main function, which does three things:\r\n//\r\n// * First, create a new `ggez::conf::Conf`\r\n// object which contains configuration info on things such\r\n// as screen resolution and window title,\r\n// * Second, create a `ggez::game::Game` object which will\r\n// do the work of creating our MainState and running our game,\r\n// * then just call `game.run()` which runs the `Game` mainloop.\r\npub fn main() {\r\n    let c = conf::Conf::new();\r\n    let mut game: Game<MainState> = Game::new(\"helloworld\", c).unwrap();\r\n    if let Err(e) = game.run() {\r\n        println!(\"Error encountered: {:?}\", e);\r\n    } else {\r\n        println!(\"Game exited cleanly.\");\r\n    }\r\n}\r\n\r\n```\r\n\r\n## License\r\n\r\nggez is released under an MIT license.\r\n\r\n## Contact\r\n\r\nOpen an issue in the Github project, or join us in `#rust-gamedev` on `irc.mozilla.org`.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}